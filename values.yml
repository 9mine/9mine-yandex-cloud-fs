replicaCount: 1

image: 
  repository: 9mine/9mine-yandex-cloud-fs
  tag: "main"
  pullPolicy: Always

initContainerImage:
  repository: 9mine/execfuse-jinja2
  tag: "master"
  pullPolicy: Always

serviceAccount:
  create: false

securityContext: 
  privileged: true
  capabilities:
    add:
      - SYS_ADMIN

service:
    type: ClusterIP
    port: 3000
    
ClusterIPRange:
    from: 3001
    to: 3020

description: "yandexcloudfs" 

fs: |
    {% include './common.j2' %}
    fs:
      # root
      "/":
        readdir: 
          sh: ls /accounts
        getattr:
          sh: *dir 
        # /<id>
        "/[0-9]+":
          name: id
          readdir: 
            list: 
              - managed-kubernetes
              - version
              - compute
          getattr: 
            sh: *dir
          # /<id>/.init.lua
          "/.init.lua":
            getattr:
              sh: *file
            read_file: 
              sh: |
                cat <<EOF
                   local function set_texture(entry, entity)
                       local prefix = init_path:match("/$") and init_path:sub(1, -2) or init_path
                       if not prefix then
                           return
                       end
                       if entry.platform_string == prefix .. "/compute/instance/get" then
                           texture.download("https://images.squarespace-cdn.com/content/5500a991e4b0ed07e64029e1/1515880162534-4I8AD4SJG9LFBO5SX5D5/image-asset.png?content-type=image%2Fpng", true,
                               "9mine-yandex-cloud-fs.png", "9mine-yandex-cloud-fs")
                           entity:set_properties({
                               visual = "cube",
                               textures = {"9mine-yandex-cloud-fs.png", "9mine-yandex-cloud-fs.png", "9mine-yandex-cloud-fs.png",
                                           "9mine-yandex-cloud-fs.png", "9mine-yandex-cloud-fs.png", "9mine-yandex-cloud-fs.png"}
                           })
                       end
                   end
                   register.add_texture_handler(init_path .. "9mine-yandex-cloud-fs-set-texture", set_texture)

                   class "yandex_cmdchan"("cmdchan")

                   function yandex_cmdchan:yandex_cmdchan(connection, cmdchan_path)
                       cmdchan:cmdchan(connection, cmdchan_path)
                   end

                   function yandex_cmdchan:write(command)
                       local conn = self.connection.conn
                       local f = conn:newfid()
                       print("Write " .. command .. " to " .. self.cmdchan_path)
                       conn:walk(conn.rootfid, f, self.cmdchan_path)
                       conn:open(f, 1)
                       local buf = data.new(command)
                       conn:write(f, 0, buf)
                       conn:clunk(f)
                   end

                   function yandex_cmdchan:execute(command, location)
                       local tmp_file = "/n/cmdchan/cmdchan_output"
                       pcall(yandex_cmdchan.write, self, command, location)
                       return select(2, pcall(yandex_cmdchan.read, self, tmp_file))
                   end
                   platform.cmdchan = yandex_cmdchan(platform.connection, core_conf:get("cmdchan_path"))

                   local function yandex_message_handler(player_name, message)
                       if message:match("^yc ") then
                           local player = minetest.get_player_by_name(player_name)
                           local player_graph = graphs:get_player_graph(player_name)
                           local platform = player_graph:get_platform(common.get_platform_string(player))
                           if not platform then
                               return false
                           end
                           local cmdchan = platform:get_cmdchan()
                           if not cmdchan then
                               return
                           end
                           message = message:gsub("^yc ", "")

                           cmdchan:write(message)
                           minetest.after(1, function()
                               local result, response = pcall(cmdchan.read, cmdchan, "/n/cmdchan/cmdchan_output")
                               cmdchan.show_response(response, player_name)
                               if not result then
                                   minetest.after(2, function()
                                       result, response = pcall(cmdchan.read, cmdchan, "/n/cmdchan/cmdchan_output")
                                       cmdchan.show_response(response, player_name)
                                   end)
                                   return
                               end
                           end)
                           return true
                       end
                   end

                   register.add_message_handler(init_path .. "yandex_message_handler", yandex_message_handler)
          

                EOF
          
          "/n":
            <<: *is_dir
            "/cmdchan":
              <<: *is_dir
              "/cmdchan_output":
                getattr: 
                  sh: (ls /accounts/$id/output >> /dev/null 2>&1 && echo 'ino=1 mode=-rwxr-xr-x nlink=1 uid=0 gid=0 rdev=0 size=0 blksize=512 blocks=2 atime=0 mtime=0 ctime=0 ')
                read_file:
                  sh: cat /accounts/$id/output
              "/chan":
                <<: *is_dir
                "/cmd":
                  <<: *is_file
                  write_file:
                    sh: |
                        str=`cat $CACHE_FILE_NAME`
                        rm -f /accounts/$id/output
                        eval "yc --token=`cat /accounts/${id}/token` --folder-id=`cat /accounts/${id}/folder` --cloud-id=`cat /accounts/${id}/cloud` $str" > /accounts/$id/out 2>&1
                        cp /accounts/$id/out /accounts/$id/output

          # /managed-kubernetes
          "/managed-kubernetes": 
            readdir: 
                list: 
                  - cluster
                  - list-versions
            getattr:
              sh: *dir
              
            # /managed-kubernetes/list-versions
            "/list-versions":
                getattr: 
                  sh: *file
                read_file: 
                  sh: yc managed-kubernetes list-versions
            # /managed-kubernetes/cluster
            "/cluster":
                getattr: 
                  sh: *dir
                readdir:
                  list: 
                    - list
                    - get 
              
                # /managed-kubernetes/cluster/list
                "/list":
                  getattr: 
                    sh: *file 
                  read_file: 
                    sh: 
                      
                # /managed-kubernetes/cluster/get
                "/get":
                  getattr: 
                    sh: *dir 
                  readdir: 
                    sh: yc managed-kubernetes cluster list --token=`cat /accounts/${id}/token` --folder-id=`cat /accounts/${id}/folder` --cloud-id=`cat /accounts/${id}/cloud` --format=json | jq  -r '.[].name'
                  # /managed-kubernetes/cluster/get/<cluster_name>
                  "/[a-z0-9-]+":
                    name: cluser_name
                    getattr: 
                      sh: *dir 
                    readdir: 
                      sh: yc managed-kubernetes cluster get --name="${cluser_name}" --token=`cat /accounts/${id}/token` --folder-id=`cat /accounts/${id}/folder` --cloud-id=`cat /accounts/${id}/cloud` --format=json | jq -r 'keys[]'
                    
                    # /managed-kubernetes/cluster/get/<cluster_name>/<cluster_attribute>
                    "/[a-z0-9_-]+":
                      name: cluster_attribute
                      getattr:
                        sh: *file 
                      read_file: 
                        sh: yc managed-kubernetes cluster get --name="${cluser_name}" --token=`cat /accounts/${id}/token` --folder-id=`cat /accounts/${id}/folder` --cloud-id=`cat /accounts/${id}/cloud` --format=json | jq -r '.'${cluster_attribute}''
          # /compute
          "/compute":
            readdir:
              list: 
                  - instance
            getattr:
              sh: *dir
            # /compute/instance
            "/instance":
              readdir:
                list: 
                  - list
                  - get 
              getattr:
                sh: *dir 
              # /compute/instance/list
              "/list":
                read_file:
                  sh: |
                    yc compute instance list --token=`cat /accounts/${id}/token` --folder-id=`cat /accounts/${id}/folder` --cloud-id=`cat /accounts/${id}/cloud`
                getattr: 
                  sh: *file 
              # /compute/instance/get   
              "/get":
                getattr: 
                  sh: *dir
                readdir: 
                  sh: yc compute instance list --token=`cat /accounts/${id}/token` --folder-id=`cat /accounts/${id}/folder` --cloud-id=`cat /accounts/${id}/cloud` --format=json | jq -r '.[].name'
                # /compute/instance/get/<compute_name>
                "/[a-z0-9-]+":
                  name: compute_name
                  readdir: 
                    sh: |
                      yc compute instance get --name "${compute_name}" --token=`cat /accounts/${id}/token` --folder-id=`cat /accounts/${id}/folder` --cloud-id=`cat /accounts/${id}/cloud` --format=json | jq -r 'keys[]'
                  getattr:
                    sh: *dir
                  # /compute/instance/get/<compute_name>/<attribute>
                  "/[a-z_]+":
                    name: attribute
                    read_file: 
                      sh: yc compute instance get --name "${compute_name}" --token=`cat /accounts/${id}/token` --folder-id=`cat /accounts/${id}/folder` --cloud-id=`cat /accounts/${id}/cloud` --format=json | jq -r '.'${attribute}''
                    getattr: 
                      sh: *file
          # /version
          "/version":
            read_file:
              sh: yc version
            getattr: 
              sh: *file
    
profile: |
    echo --- start of profile loading ---
    load file2chan
    load std
    ndb/cs
    for host_var in `{ os env } { '{'$host_var'}' }
    test -d /mnt/registry || mkdir -p /mnt/registry
    test -d /tmp || mkdir -p /tmp
    mount -A tcp!registry!registry /mnt/registry
      
    dir = $EXPORT_PATH
    port = $NINEP_PUBLIC_PORT
    echo $NINEP_PUBLIC_HOST > /dev/sysname 
    load mpexpr
    fs_port = ${expr $NINEP_PUBLIC_PORT 1 +}
    file2chan /tmp/yc {
        } {
        load mpexpr
        var=${expr 10 rand}
        echo new id is $var
        echo hostname is `{os hostname}
        (token folder cloud) = `{echo ${rget data}} 
        echo porf of configured yandex cloud cli is: $fs_port 
        echo connection string is: tcp!^$cloud^!^$fs_port
        `{os /bin/bash -c 'mkdir -p /accounts/'^$var}
        `{os /bin/bash -c 'echo '^$token^' > /accounts/'^$var^'/token'}
        `{os /bin/bash -c 'echo '^$folder^' > /accounts/'^$var^'/folder'}
        `{os /bin/bash -c 'echo '^$cloud^' > /accounts/'^$var^'/cloud'}
        grid/reglisten -A -r description 'user id is '^$var tcp!*!^$fs_port { export $dir^/^$var & } &
        fs_port=${expr $fs_port 1 +}
        }
    
    grid/reglisten -A -r description ${quote $NINEP_DESCRIPTION} 'tcp!*!'^$port { export /tmp & }
    test -n $status && os pkill -9 emu-g
    echo --- end of profile loading ---
